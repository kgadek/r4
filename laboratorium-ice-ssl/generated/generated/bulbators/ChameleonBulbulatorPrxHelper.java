// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `ChameleonBulbulatorPrxHelper.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package generated.bulbators;

public final class ChameleonBulbulatorPrxHelper extends Ice.ObjectPrxHelperBase implements ChameleonBulbulatorPrx
{
    public void
    turnBulbulOff()
    {
        turnBulbulOff(null, false);
    }

    public void
    turnBulbulOff(java.util.Map<String, String> __ctx)
    {
        turnBulbulOff(__ctx, true);
    }

    private void
    turnBulbulOff(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _ChameleonBulbulatorDel __del = (_ChameleonBulbulatorDel)__delBase;
                __del.turnBulbulOff(__ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __turnBulbulOff_name = "turnBulbulOff";

    public Ice.AsyncResult begin_turnBulbulOff()
    {
        return begin_turnBulbulOff(null, false, null);
    }

    public Ice.AsyncResult begin_turnBulbulOff(java.util.Map<String, String> __ctx)
    {
        return begin_turnBulbulOff(__ctx, true, null);
    }

    public Ice.AsyncResult begin_turnBulbulOff(Ice.Callback __cb)
    {
        return begin_turnBulbulOff(null, false, __cb);
    }

    public Ice.AsyncResult begin_turnBulbulOff(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_turnBulbulOff(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_turnBulbulOff(Callback_Bulbator_turnBulbulOff __cb)
    {
        return begin_turnBulbulOff(null, false, __cb);
    }

    public Ice.AsyncResult begin_turnBulbulOff(java.util.Map<String, String> __ctx, Callback_Bulbator_turnBulbulOff __cb)
    {
        return begin_turnBulbulOff(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_turnBulbulOff(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __turnBulbulOff_name, __cb);
        try
        {
            __result.__prepare(__turnBulbulOff_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_turnBulbulOff(Ice.AsyncResult __result)
    {
        __end(__result, __turnBulbulOff_name);
    }

    public void
    turnBulbulOn()
    {
        turnBulbulOn(null, false);
    }

    public void
    turnBulbulOn(java.util.Map<String, String> __ctx)
    {
        turnBulbulOn(__ctx, true);
    }

    private void
    turnBulbulOn(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _ChameleonBulbulatorDel __del = (_ChameleonBulbulatorDel)__delBase;
                __del.turnBulbulOn(__ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __turnBulbulOn_name = "turnBulbulOn";

    public Ice.AsyncResult begin_turnBulbulOn()
    {
        return begin_turnBulbulOn(null, false, null);
    }

    public Ice.AsyncResult begin_turnBulbulOn(java.util.Map<String, String> __ctx)
    {
        return begin_turnBulbulOn(__ctx, true, null);
    }

    public Ice.AsyncResult begin_turnBulbulOn(Ice.Callback __cb)
    {
        return begin_turnBulbulOn(null, false, __cb);
    }

    public Ice.AsyncResult begin_turnBulbulOn(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_turnBulbulOn(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_turnBulbulOn(Callback_Bulbator_turnBulbulOn __cb)
    {
        return begin_turnBulbulOn(null, false, __cb);
    }

    public Ice.AsyncResult begin_turnBulbulOn(java.util.Map<String, String> __ctx, Callback_Bulbator_turnBulbulOn __cb)
    {
        return begin_turnBulbulOn(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_turnBulbulOn(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __turnBulbulOn_name, __cb);
        try
        {
            __result.__prepare(__turnBulbulOn_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_turnBulbulOn(Ice.AsyncResult __result)
    {
        __end(__result, __turnBulbulOn_name);
    }

    public void
    changeColour(String color)
    {
        changeColour(color, null, false);
    }

    public void
    changeColour(String color, java.util.Map<String, String> __ctx)
    {
        changeColour(color, __ctx, true);
    }

    private void
    changeColour(String color, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _ChameleonBulbulatorDel __del = (_ChameleonBulbulatorDel)__delBase;
                __del.changeColour(color, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __changeColour_name = "changeColour";

    public Ice.AsyncResult begin_changeColour(String color)
    {
        return begin_changeColour(color, null, false, null);
    }

    public Ice.AsyncResult begin_changeColour(String color, java.util.Map<String, String> __ctx)
    {
        return begin_changeColour(color, __ctx, true, null);
    }

    public Ice.AsyncResult begin_changeColour(String color, Ice.Callback __cb)
    {
        return begin_changeColour(color, null, false, __cb);
    }

    public Ice.AsyncResult begin_changeColour(String color, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_changeColour(color, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_changeColour(String color, Callback_ChameleonBulbulator_changeColour __cb)
    {
        return begin_changeColour(color, null, false, __cb);
    }

    public Ice.AsyncResult begin_changeColour(String color, java.util.Map<String, String> __ctx, Callback_ChameleonBulbulator_changeColour __cb)
    {
        return begin_changeColour(color, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_changeColour(String color, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __changeColour_name, __cb);
        try
        {
            __result.__prepare(__changeColour_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(color);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_changeColour(Ice.AsyncResult __result)
    {
        __end(__result, __changeColour_name);
    }

    public void
    actionPerformed()
    {
        actionPerformed(null, false);
    }

    public void
    actionPerformed(java.util.Map<String, String> __ctx)
    {
        actionPerformed(__ctx, true);
    }

    private void
    actionPerformed(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _ChameleonBulbulatorDel __del = (_ChameleonBulbulatorDel)__delBase;
                __del.actionPerformed(__ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __actionPerformed_name = "actionPerformed";

    public Ice.AsyncResult begin_actionPerformed()
    {
        return begin_actionPerformed(null, false, null);
    }

    public Ice.AsyncResult begin_actionPerformed(java.util.Map<String, String> __ctx)
    {
        return begin_actionPerformed(__ctx, true, null);
    }

    public Ice.AsyncResult begin_actionPerformed(Ice.Callback __cb)
    {
        return begin_actionPerformed(null, false, __cb);
    }

    public Ice.AsyncResult begin_actionPerformed(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_actionPerformed(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_actionPerformed(generated.devices.Callback_Device_actionPerformed __cb)
    {
        return begin_actionPerformed(null, false, __cb);
    }

    public Ice.AsyncResult begin_actionPerformed(java.util.Map<String, String> __ctx, generated.devices.Callback_Device_actionPerformed __cb)
    {
        return begin_actionPerformed(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_actionPerformed(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __actionPerformed_name, __cb);
        try
        {
            __result.__prepare(__actionPerformed_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_actionPerformed(Ice.AsyncResult __result)
    {
        __end(__result, __actionPerformed_name);
    }

    public boolean
    canBeEvicted()
    {
        return canBeEvicted(null, false);
    }

    public boolean
    canBeEvicted(java.util.Map<String, String> __ctx)
    {
        return canBeEvicted(__ctx, true);
    }

    private boolean
    canBeEvicted(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("canBeEvicted");
                __delBase = __getDelegate(false);
                _ChameleonBulbulatorDel __del = (_ChameleonBulbulatorDel)__delBase;
                return __del.canBeEvicted(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __canBeEvicted_name = "canBeEvicted";

    public Ice.AsyncResult begin_canBeEvicted()
    {
        return begin_canBeEvicted(null, false, null);
    }

    public Ice.AsyncResult begin_canBeEvicted(java.util.Map<String, String> __ctx)
    {
        return begin_canBeEvicted(__ctx, true, null);
    }

    public Ice.AsyncResult begin_canBeEvicted(Ice.Callback __cb)
    {
        return begin_canBeEvicted(null, false, __cb);
    }

    public Ice.AsyncResult begin_canBeEvicted(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_canBeEvicted(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_canBeEvicted(generated.devices.Callback_Device_canBeEvicted __cb)
    {
        return begin_canBeEvicted(null, false, __cb);
    }

    public Ice.AsyncResult begin_canBeEvicted(java.util.Map<String, String> __ctx, generated.devices.Callback_Device_canBeEvicted __cb)
    {
        return begin_canBeEvicted(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_canBeEvicted(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__canBeEvicted_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __canBeEvicted_name, __cb);
        try
        {
            __result.__prepare(__canBeEvicted_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_canBeEvicted(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __canBeEvicted_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public void
    getControl(String userName)
        throws generated.exceptions.DeviceAlreadyInUseException
    {
        getControl(userName, null, false);
    }

    public void
    getControl(String userName, java.util.Map<String, String> __ctx)
        throws generated.exceptions.DeviceAlreadyInUseException
    {
        getControl(userName, __ctx, true);
    }

    private void
    getControl(String userName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws generated.exceptions.DeviceAlreadyInUseException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getControl");
                __delBase = __getDelegate(false);
                _ChameleonBulbulatorDel __del = (_ChameleonBulbulatorDel)__delBase;
                __del.getControl(userName, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getControl_name = "getControl";

    public Ice.AsyncResult begin_getControl(String userName)
    {
        return begin_getControl(userName, null, false, null);
    }

    public Ice.AsyncResult begin_getControl(String userName, java.util.Map<String, String> __ctx)
    {
        return begin_getControl(userName, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getControl(String userName, Ice.Callback __cb)
    {
        return begin_getControl(userName, null, false, __cb);
    }

    public Ice.AsyncResult begin_getControl(String userName, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getControl(userName, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getControl(String userName, generated.devices.Callback_Device_getControl __cb)
    {
        return begin_getControl(userName, null, false, __cb);
    }

    public Ice.AsyncResult begin_getControl(String userName, java.util.Map<String, String> __ctx, generated.devices.Callback_Device_getControl __cb)
    {
        return begin_getControl(userName, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getControl(String userName, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getControl_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getControl_name, __cb);
        try
        {
            __result.__prepare(__getControl_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(userName);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_getControl(Ice.AsyncResult __result)
        throws generated.exceptions.DeviceAlreadyInUseException
    {
        Ice.AsyncResult.__check(__result, this, __getControl_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(generated.exceptions.DeviceAlreadyInUseException __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        IceInternal.BasicStream __is = __result.__is();
        __is.skipEmptyEncaps();
    }

    public String[]
    getInterfaceInfo()
    {
        return getInterfaceInfo(null, false);
    }

    public String[]
    getInterfaceInfo(java.util.Map<String, String> __ctx)
    {
        return getInterfaceInfo(__ctx, true);
    }

    private String[]
    getInterfaceInfo(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getInterfaceInfo");
                __delBase = __getDelegate(false);
                _ChameleonBulbulatorDel __del = (_ChameleonBulbulatorDel)__delBase;
                return __del.getInterfaceInfo(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getInterfaceInfo_name = "getInterfaceInfo";

    public Ice.AsyncResult begin_getInterfaceInfo()
    {
        return begin_getInterfaceInfo(null, false, null);
    }

    public Ice.AsyncResult begin_getInterfaceInfo(java.util.Map<String, String> __ctx)
    {
        return begin_getInterfaceInfo(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getInterfaceInfo(Ice.Callback __cb)
    {
        return begin_getInterfaceInfo(null, false, __cb);
    }

    public Ice.AsyncResult begin_getInterfaceInfo(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getInterfaceInfo(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getInterfaceInfo(generated.devices.Callback_Device_getInterfaceInfo __cb)
    {
        return begin_getInterfaceInfo(null, false, __cb);
    }

    public Ice.AsyncResult begin_getInterfaceInfo(java.util.Map<String, String> __ctx, generated.devices.Callback_Device_getInterfaceInfo __cb)
    {
        return begin_getInterfaceInfo(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getInterfaceInfo(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getInterfaceInfo_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getInterfaceInfo_name, __cb);
        try
        {
            __result.__prepare(__getInterfaceInfo_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String[] end_getInterfaceInfo(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getInterfaceInfo_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        String[] __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = generated.devices.deviceInterfaceHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public String
    getStatus()
    {
        return getStatus(null, false);
    }

    public String
    getStatus(java.util.Map<String, String> __ctx)
    {
        return getStatus(__ctx, true);
    }

    private String
    getStatus(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getStatus");
                __delBase = __getDelegate(false);
                _ChameleonBulbulatorDel __del = (_ChameleonBulbulatorDel)__delBase;
                return __del.getStatus(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getStatus_name = "getStatus";

    public Ice.AsyncResult begin_getStatus()
    {
        return begin_getStatus(null, false, null);
    }

    public Ice.AsyncResult begin_getStatus(java.util.Map<String, String> __ctx)
    {
        return begin_getStatus(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getStatus(Ice.Callback __cb)
    {
        return begin_getStatus(null, false, __cb);
    }

    public Ice.AsyncResult begin_getStatus(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getStatus(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getStatus(generated.devices.Callback_Device_getStatus __cb)
    {
        return begin_getStatus(null, false, __cb);
    }

    public Ice.AsyncResult begin_getStatus(java.util.Map<String, String> __ctx, generated.devices.Callback_Device_getStatus __cb)
    {
        return begin_getStatus(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getStatus(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getStatus_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getStatus_name, __cb);
        try
        {
            __result.__prepare(__getStatus_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getStatus(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getStatus_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        String __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readString();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    isUsed()
    {
        return isUsed(null, false);
    }

    public boolean
    isUsed(java.util.Map<String, String> __ctx)
    {
        return isUsed(__ctx, true);
    }

    private boolean
    isUsed(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("isUsed");
                __delBase = __getDelegate(false);
                _ChameleonBulbulatorDel __del = (_ChameleonBulbulatorDel)__delBase;
                return __del.isUsed(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __isUsed_name = "isUsed";

    public Ice.AsyncResult begin_isUsed()
    {
        return begin_isUsed(null, false, null);
    }

    public Ice.AsyncResult begin_isUsed(java.util.Map<String, String> __ctx)
    {
        return begin_isUsed(__ctx, true, null);
    }

    public Ice.AsyncResult begin_isUsed(Ice.Callback __cb)
    {
        return begin_isUsed(null, false, __cb);
    }

    public Ice.AsyncResult begin_isUsed(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_isUsed(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_isUsed(generated.devices.Callback_Device_isUsed __cb)
    {
        return begin_isUsed(null, false, __cb);
    }

    public Ice.AsyncResult begin_isUsed(java.util.Map<String, String> __ctx, generated.devices.Callback_Device_isUsed __cb)
    {
        return begin_isUsed(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_isUsed(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__isUsed_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __isUsed_name, __cb);
        try
        {
            __result.__prepare(__isUsed_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_isUsed(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __isUsed_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public void
    releaseControl(String userName)
        throws generated.exceptions.IncorrectUserNameException
    {
        releaseControl(userName, null, false);
    }

    public void
    releaseControl(String userName, java.util.Map<String, String> __ctx)
        throws generated.exceptions.IncorrectUserNameException
    {
        releaseControl(userName, __ctx, true);
    }

    private void
    releaseControl(String userName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws generated.exceptions.IncorrectUserNameException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("releaseControl");
                __delBase = __getDelegate(false);
                _ChameleonBulbulatorDel __del = (_ChameleonBulbulatorDel)__delBase;
                __del.releaseControl(userName, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __releaseControl_name = "releaseControl";

    public Ice.AsyncResult begin_releaseControl(String userName)
    {
        return begin_releaseControl(userName, null, false, null);
    }

    public Ice.AsyncResult begin_releaseControl(String userName, java.util.Map<String, String> __ctx)
    {
        return begin_releaseControl(userName, __ctx, true, null);
    }

    public Ice.AsyncResult begin_releaseControl(String userName, Ice.Callback __cb)
    {
        return begin_releaseControl(userName, null, false, __cb);
    }

    public Ice.AsyncResult begin_releaseControl(String userName, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_releaseControl(userName, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_releaseControl(String userName, generated.devices.Callback_Device_releaseControl __cb)
    {
        return begin_releaseControl(userName, null, false, __cb);
    }

    public Ice.AsyncResult begin_releaseControl(String userName, java.util.Map<String, String> __ctx, generated.devices.Callback_Device_releaseControl __cb)
    {
        return begin_releaseControl(userName, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_releaseControl(String userName, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__releaseControl_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __releaseControl_name, __cb);
        try
        {
            __result.__prepare(__releaseControl_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(userName);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_releaseControl(Ice.AsyncResult __result)
        throws generated.exceptions.IncorrectUserNameException
    {
        Ice.AsyncResult.__check(__result, this, __releaseControl_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(generated.exceptions.IncorrectUserNameException __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        IceInternal.BasicStream __is = __result.__is();
        __is.skipEmptyEncaps();
    }

    public void
    startObservation(generated.devices.ObserverPrx obs)
        throws generated.exceptions.UserAlreadyObserveException
    {
        startObservation(obs, null, false);
    }

    public void
    startObservation(generated.devices.ObserverPrx obs, java.util.Map<String, String> __ctx)
        throws generated.exceptions.UserAlreadyObserveException
    {
        startObservation(obs, __ctx, true);
    }

    private void
    startObservation(generated.devices.ObserverPrx obs, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws generated.exceptions.UserAlreadyObserveException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("startObservation");
                __delBase = __getDelegate(false);
                _ChameleonBulbulatorDel __del = (_ChameleonBulbulatorDel)__delBase;
                __del.startObservation(obs, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __startObservation_name = "startObservation";

    public Ice.AsyncResult begin_startObservation(generated.devices.ObserverPrx obs)
    {
        return begin_startObservation(obs, null, false, null);
    }

    public Ice.AsyncResult begin_startObservation(generated.devices.ObserverPrx obs, java.util.Map<String, String> __ctx)
    {
        return begin_startObservation(obs, __ctx, true, null);
    }

    public Ice.AsyncResult begin_startObservation(generated.devices.ObserverPrx obs, Ice.Callback __cb)
    {
        return begin_startObservation(obs, null, false, __cb);
    }

    public Ice.AsyncResult begin_startObservation(generated.devices.ObserverPrx obs, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_startObservation(obs, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_startObservation(generated.devices.ObserverPrx obs, generated.devices.Callback_Device_startObservation __cb)
    {
        return begin_startObservation(obs, null, false, __cb);
    }

    public Ice.AsyncResult begin_startObservation(generated.devices.ObserverPrx obs, java.util.Map<String, String> __ctx, generated.devices.Callback_Device_startObservation __cb)
    {
        return begin_startObservation(obs, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_startObservation(generated.devices.ObserverPrx obs, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__startObservation_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __startObservation_name, __cb);
        try
        {
            __result.__prepare(__startObservation_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            generated.devices.ObserverPrxHelper.__write(__os, obs);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_startObservation(Ice.AsyncResult __result)
        throws generated.exceptions.UserAlreadyObserveException
    {
        Ice.AsyncResult.__check(__result, this, __startObservation_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(generated.exceptions.UserAlreadyObserveException __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        IceInternal.BasicStream __is = __result.__is();
        __is.skipEmptyEncaps();
    }

    public void
    stopObservation(generated.devices.ObserverPrx obs)
        throws generated.exceptions.IncorrectUserNameException
    {
        stopObservation(obs, null, false);
    }

    public void
    stopObservation(generated.devices.ObserverPrx obs, java.util.Map<String, String> __ctx)
        throws generated.exceptions.IncorrectUserNameException
    {
        stopObservation(obs, __ctx, true);
    }

    private void
    stopObservation(generated.devices.ObserverPrx obs, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws generated.exceptions.IncorrectUserNameException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("stopObservation");
                __delBase = __getDelegate(false);
                _ChameleonBulbulatorDel __del = (_ChameleonBulbulatorDel)__delBase;
                __del.stopObservation(obs, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __stopObservation_name = "stopObservation";

    public Ice.AsyncResult begin_stopObservation(generated.devices.ObserverPrx obs)
    {
        return begin_stopObservation(obs, null, false, null);
    }

    public Ice.AsyncResult begin_stopObservation(generated.devices.ObserverPrx obs, java.util.Map<String, String> __ctx)
    {
        return begin_stopObservation(obs, __ctx, true, null);
    }

    public Ice.AsyncResult begin_stopObservation(generated.devices.ObserverPrx obs, Ice.Callback __cb)
    {
        return begin_stopObservation(obs, null, false, __cb);
    }

    public Ice.AsyncResult begin_stopObservation(generated.devices.ObserverPrx obs, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_stopObservation(obs, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_stopObservation(generated.devices.ObserverPrx obs, generated.devices.Callback_Device_stopObservation __cb)
    {
        return begin_stopObservation(obs, null, false, __cb);
    }

    public Ice.AsyncResult begin_stopObservation(generated.devices.ObserverPrx obs, java.util.Map<String, String> __ctx, generated.devices.Callback_Device_stopObservation __cb)
    {
        return begin_stopObservation(obs, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_stopObservation(generated.devices.ObserverPrx obs, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__stopObservation_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __stopObservation_name, __cb);
        try
        {
            __result.__prepare(__stopObservation_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            generated.devices.ObserverPrxHelper.__write(__os, obs);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_stopObservation(Ice.AsyncResult __result)
        throws generated.exceptions.IncorrectUserNameException
    {
        Ice.AsyncResult.__check(__result, this, __stopObservation_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(generated.exceptions.IncorrectUserNameException __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        IceInternal.BasicStream __is = __result.__is();
        __is.skipEmptyEncaps();
    }

    public static ChameleonBulbulatorPrx
    checkedCast(Ice.ObjectPrx __obj)
    {
        ChameleonBulbulatorPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (ChameleonBulbulatorPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    ChameleonBulbulatorPrxHelper __h = new ChameleonBulbulatorPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ChameleonBulbulatorPrx
    checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        ChameleonBulbulatorPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (ChameleonBulbulatorPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    ChameleonBulbulatorPrxHelper __h = new ChameleonBulbulatorPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ChameleonBulbulatorPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ChameleonBulbulatorPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    ChameleonBulbulatorPrxHelper __h = new ChameleonBulbulatorPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ChameleonBulbulatorPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        ChameleonBulbulatorPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    ChameleonBulbulatorPrxHelper __h = new ChameleonBulbulatorPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ChameleonBulbulatorPrx
    uncheckedCast(Ice.ObjectPrx __obj)
    {
        ChameleonBulbulatorPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (ChameleonBulbulatorPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                ChameleonBulbulatorPrxHelper __h = new ChameleonBulbulatorPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static ChameleonBulbulatorPrx
    uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ChameleonBulbulatorPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            ChameleonBulbulatorPrxHelper __h = new ChameleonBulbulatorPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::generated::bulbators::Bulbator",
        "::generated::bulbators::ChameleonBulbulator",
        "::generated::devices::Device"
    };

    public static String
    ice_staticId()
    {
        return __ids[2];
    }

    protected Ice._ObjectDelM
    __createDelegateM()
    {
        return new _ChameleonBulbulatorDelM();
    }

    protected Ice._ObjectDelD
    __createDelegateD()
    {
        return new _ChameleonBulbulatorDelD();
    }

    public static void
    __write(IceInternal.BasicStream __os, ChameleonBulbulatorPrx v)
    {
        __os.writeProxy(v);
    }

    public static ChameleonBulbulatorPrx
    __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            ChameleonBulbulatorPrxHelper result = new ChameleonBulbulatorPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }
}
